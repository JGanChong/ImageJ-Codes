/*
 * Macro template to process multiple images in a folder
 */

#@ File (label = "Input directory", style = "directory") input
#@ File (label = "Output directory", style = "directory") output


// See also Process_Folder.py for a version of this code
// in the Python scripting language.

processFolder(input);

// function to scan folders/subfolders/files to find files with correct name
function processFolder(input) {
	list = getFileList(input);
	list = Array.sort(list);
	for (i = 0; i < list.length; i++) {
		if(File.isDirectory(input + File.separator + list[i]))
			processFolder(input + File.separator + list[i]);
		if(indexOf(list[i], "GEM")>5)
			processFile(input, output, list[i]);
	}
}

function processFile(input, output, file) {

//open stack GEM file
open(input+File.separator+list[i]);
	
//number of slices
n = nSlices;


//Get Names

string = getTitle();
string2=replace(string,"GEM","Nuc");
string3=replace(string,"GEM","MERGE");

//open single NUC  file
open(input+File.separator+string2);


//create stack form single image
setBatchMode("hide");
imgID = getImageID();

for (i = 0; i < n; i++) {
selectImage(string2);
run("Duplicate...", "title=DUPMERGE");
}

//convert to stack
run("Images to Stack", "name=STACKORI title=DUPMERGE use");
setBatchMode("exit and display");

//merge with other stack
run("Merge Channels...", "c1=STACKORI c2="+string+" create keep ignore");


//reorder z to time
run("Re-order Hyperstack ...", "channels=[Channels (c)] slices=[Frames (t)] frames=[Slices (z)]");

//save merge file
saveAs("tif", output+File.separator+string3+".tif");


//Close everything
close("*");



}
